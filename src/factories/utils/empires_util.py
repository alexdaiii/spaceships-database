import json
import os
from functools import lru_cache

import colorful as cf
import pandas as pd
from pydantic import BaseModel, computed_field
from sqlalchemy import Engine, func, select

from src.database.db import get_session
from src.models import Empire, EmpireToEthic, Planet, StarSystem
from src.util import get_location

from .util import STARTING_ID


class EmpireInfo(BaseModel):
    authorities: list[str]
    ethics: list[str]

    @computed_field
    @property
    def authorities_df(self) -> pd.DataFrame:
        return pd.DataFrame(
            [
                {
                    "empire_authority_id": i,
                    "empire_authority_name": authority,
                }
                for i, authority in enumerate(
                    self.authorities,
                    start=STARTING_ID,
                )
            ]
        ).set_index("empire_authority_id")

    @computed_field
    @property
    def ethics_df(self) -> pd.DataFrame:
        return pd.DataFrame(
            [
                {
                    "empire_ethic_id": i,
                    "empire_ethic_name": ethic,
                }
                for i, ethic in enumerate(
                    self.ethics,
                    start=STARTING_ID,
                )
            ]
        ).set_index("empire_ethic_id")

    class Config:
        arbitrary_types_allowed = True


@lru_cache()
def get_empire_info():
    empire_info_file = "../assets/empire.json"

    with open(os.path.join(get_location(), empire_info_file), "r") as f:
        print(f"Loading {empire_info_file}")
        empire_info = EmpireInfo(**json.load(f))

    return empire_info


@lru_cache()
def authority_df():
    return get_empire_info().authorities_df


@lru_cache()
def ethic_df():
    return get_empire_info().ethics_df


def empire_id_range(engine: Engine) -> tuple[int, int]:
    """
    Returns the minimum and maximum empire ids.
    Assumes ids are auto generated by the database
    """
    with get_session(engine) as session:
        min_id = session.scalar(
            select(Empire.empire_id).order_by(Empire.empire_id.asc()).limit(1)
        )
        max_id = session.scalar(
            select(Empire.empire_id).order_by(Empire.empire_id.desc()).limit(1)
        )
    return min_id, max_id


@lru_cache(maxsize=1)
def empires_info(engine: Engine):
    """
    Returns a memoized dataframe of empires info.

    NOTE: any changes made to this dataframe will be reflected for ALL
    calls to this function until the engine changes.
    """
    print(cf.blue("Loading empires info"))

    stmt = (
        select(
            Empire.empire_id,
            Empire.empire_authority_id,
            EmpireToEthic.empire_ethic_id,
            EmpireToEthic.empire_ethic_attraction,
        )
        .select_from(Empire)
        .join(EmpireToEthic)
        .order_by(Empire.empire_id)
    )
    df = (
        pd.read_sql_query(stmt, con=engine)
        .groupby("empire_id")
        .agg(
            {
                "empire_authority_id": "first",
                "empire_ethic_id": list,
                "empire_ethic_attraction": list,
            }
        )
        .reset_index()
    )

    return df


def get_empire_resources(engine):
    return pd.read_sql(
        select(
            Empire.empire_id,
            func.sum(Planet.planet_energy_value).label("total_energy"),
            func.sum(Planet.planet_minerals_value).label("total_minerals"),
            func.sum(Planet.planet_research_value).label("total_research"),
            func.sum(Planet.planet_trade_value).label("total_trade"),
        )
        .select_from(Empire)
        .join(StarSystem)
        .join(Planet)
        .group_by(Empire.empire_id)
        .order_by(Empire.empire_id),
        engine,
    )
